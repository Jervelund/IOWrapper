// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ArduinoDescriptor.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Core_Arduino.Model {

  /// <summary>Holder for reflection information generated from ArduinoDescriptor.proto</summary>
  public static partial class ArduinoDescriptorReflection {

    #region Descriptor
    /// <summary>File descriptor for ArduinoDescriptor.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ArduinoDescriptorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdBcmR1aW5vRGVzY3JpcHRvci5wcm90bxIHYXJkdWlubyJDChFBcmR1aW5v",
            "RGVzY3JpcHRvchIQCghzZXF1ZW5jZRgBIAEoBRIMCgRheGlzGAIgAygFEg4K",
            "BmJ1dHRvbhgDIAMoCEIVqgISQ29yZV9BcmR1aW5vLk1vZGVsYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Core_Arduino.Model.ArduinoDescriptor), global::Core_Arduino.Model.ArduinoDescriptor.Parser, new[]{ "Sequence", "Axis", "Button" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ArduinoDescriptor : pb::IMessage<ArduinoDescriptor> {
    private static readonly pb::MessageParser<ArduinoDescriptor> _parser = new pb::MessageParser<ArduinoDescriptor>(() => new ArduinoDescriptor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArduinoDescriptor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core_Arduino.Model.ArduinoDescriptorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArduinoDescriptor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArduinoDescriptor(ArduinoDescriptor other) : this() {
      sequence_ = other.sequence_;
      axis_ = other.axis_.Clone();
      button_ = other.button_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArduinoDescriptor Clone() {
      return new ArduinoDescriptor(this);
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 1;
    private int sequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_axis_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> axis_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Axis {
      get { return axis_; }
    }

    /// <summary>Field number for the "button" field.</summary>
    public const int ButtonFieldNumber = 3;
    private static readonly pb::FieldCodec<bool> _repeated_button_codec
        = pb::FieldCodec.ForBool(26);
    private readonly pbc::RepeatedField<bool> button_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> Button {
      get { return button_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArduinoDescriptor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArduinoDescriptor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sequence != other.Sequence) return false;
      if(!axis_.Equals(other.axis_)) return false;
      if(!button_.Equals(other.button_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sequence != 0) hash ^= Sequence.GetHashCode();
      hash ^= axis_.GetHashCode();
      hash ^= button_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sequence != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Sequence);
      }
      axis_.WriteTo(output, _repeated_axis_codec);
      button_.WriteTo(output, _repeated_button_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sequence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sequence);
      }
      size += axis_.CalculateSize(_repeated_axis_codec);
      size += button_.CalculateSize(_repeated_button_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArduinoDescriptor other) {
      if (other == null) {
        return;
      }
      if (other.Sequence != 0) {
        Sequence = other.Sequence;
      }
      axis_.Add(other.axis_);
      button_.Add(other.button_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Sequence = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            axis_.AddEntriesFrom(input, _repeated_axis_codec);
            break;
          }
          case 26:
          case 24: {
            button_.AddEntriesFrom(input, _repeated_button_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
